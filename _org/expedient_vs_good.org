#+STARTUP: showall indent
#+STARTUP: hidestars
#+OPTIONS: toc:nil
#+begin_html
---
published: true
layout: post
title: What's Expedient vs what's good - curriculum vs teachers
tags:  
---
#+end_html

#+begin_html
<style>
div.center {text-align:center;}
</style>
#+end_html

#+begin_quote
If we don't do anything then only schools like Stuy will have CS.
#+end_quote

* 
I heard that the other day. It was a comment relating to a number of
efforts, both in and out of  NY to get CS into the classroom.

These programs abound and up front let me say that they're all well
meaning and have the best of intentions.

In NYC, programs receiving money, publicity, and support, include:

- The Software Engineering Pilot (SEP)
- Google CS First afterschool
- The NSF grant bring the Beauty and Joy of Computing class to NYC (BGP)

Terrific -- we'll scale up CS ed in NY from nothing to everyone in no
time. It's fast, it scales. But is it good.

* 
I'd argue that maybe it's not. These programs all share a few things
in common. 

First, they're all expedient. You can implement them in an election
cycle. Roll out a pre-fab curriculum with scripted lessons, give the
teachers a summer and some weekend workshops and we're good to go. No
CS knowledge needed.

Next, as far as I can tell, none were developed by experienced high school
teachers with a deep knowledge of CS. 

The SEP was originally developed by someone, who, according to his
linked in profile never coded and never taught.

Now BGP is indeed developed by an experienced educator, Dan Garcia and
in fact an educator that I like and respect. We differ in that he
believes drag and drop is appropriate for a college level or high
school course and I'm in the other camp. I'd also say there are a lot
of good ideas in BGP. In fact if you look at BGP, it hits on a number
of the points I put into my intro course that we use at Stuy in the
mid to late 90s. My point here is that I'm pretty sure Dan has spent
most if not all of his carreer as a college educator not a high school
one. Even with only  my brief dabbling in front of a college class
it's easy to tell that they are different beasts.

And Google's CS First? I've been very impressed by Google's engineers,
in fact, many are my former students. It's high school education team?
Not so much.

Finally, these efforts buy into the myth that anyone can teach and
that anyone can teach computer science. Even worse, the Google CS
First claims people running their program don't need to know a thing
about computer science.

Anyone who knows teaching knows that you can't learn a subject well
enough to reall teach it in such a short period of time. Of course,
it does align itself with education "reform" where the true master
teacher is no longer desirable and we should all be drones that teach
lessons from scripts and all testing shall be standardized.

I rememer the first time I saw a progarm like this - it was the CISCO
Networking Academy. Teachers trained for a few weeks in the summer and
the course was basically run via computer based tutorials. I can't
speak for it nationally but in my experience, what the students
learned was superficial - very test oriented and there was no value
added by the teacher - even after years of "teaching" the
classes. There's a reason why the few networking lessons in our System
Programming class are called "CISCO in an hour." The kids learn more
in those couple of lessons than in a year of the CISCO curriculum. 

Who was to blame? Cisco? They were trying to do something good. The
teacher? Partially, after time they should have learned something of
networking but they were very much out of their element having started
the process from zero tech experience. 

The fact is, that got a "Computer Networking" class into the
schools. It might have been meant as a stop-gap until we could get
real Computer Networking teachers hired or trained but it ended up
being good enough. The end result -- bad classes and students not
learning what they could.

* 
So here we are back again at the "let's take non CS teachers, give
them some PD and we'll be good." Rather than take the time to solve
the CS Education problem, we're going to throw down a curriculum, do
some PD and say that it will buy us time. The truth is, however, that
we're going to say "look, we have CS in the schools" and it will be
good enough. 

I'd argue, though that for CS, good enough is particularly
dangerous. It's very easy to work through a scripted and coached
program and end up with kids thinking they know some real CS and have
a real product yet having not really learned the subject. This won't
be exposed until later, when they're gone and in college. I predict
that unless something changes, these efforts and similar ones will
drive up the  number of people who after this exposure will say they
love CS but once they get hit over the head with "funcitonal
programming in HASKELL" or whatever real CS they see in college,
they'll drop like flies.
* 
What's the answer? We've got to stop doing what's expedient and do
what's good and what's right.



* Part 2

A couple of other blog itches I want to scratch are the many after
school, summer, and drop in programs to go with the there I mentioned
above. Hopefully I'll get to rant about them soon.
