#+STARTUP: showall indent
#+STARTUP: hidestars
#+OPTIONS: toc:nil
#+begin_html
---
published: true
layout: post
title:  Twitch Coding
tags:
---
#+end_html

#+begin_html
<style>
div.center {text-align:center;}
</style>
#+end_html

We have the kids write programs in all sorts of ways

- on paper
- solo
- informally in pairs
- "pair programming"
- We have them trade code, pick up each others projects, and more.

We do lots of different things to engage the kids in a lot of
different ways and I love it when someone comes up with a new
technique.


My friend, colleague, and incidentally, former student, Sam had such
an idea the other day. Sam started his teaching career at Francis
Lewis High School and it took us a while to convince him to join the
team, but he's been with us for about three years now and he's terrific.

Sam's also our resident gamer so I guess I shouldn't have been
surprised when Sam said he was going to do [[http://www.reddit.com/r/twitchplayspokemon/comments/1y94r8/the_history_of_twitch_plays_pokemon/][Twitch Pokemon]] coding with
his classes. It sounded great.

In Twitch Pokemen, users type moves into a chat window and a bot reads
the commands to control a Pokemon. Sam's idea was to apply it to a CS class.

I loved the idea so I tried it in my classes.

First cut, I did it with stacks. We had a basic design in mind and then we started the "Twitch Coding." 

We went up and down the rows. When it was a students turn, they could
either add a word, line, or concept, delete one, or change one.

So, for example, if the state of the code was:

#+BEGIN_SRC java :export none
  
  public Node top;
  
  public void push(String s) {
      Node n = new Node(s);
  }
  
#+END_SRC

a student could:

- add n.setNext(top) to the push routine
- change public to private in the declaration of top

Or the somewhat lame

- add a // above the push declaration line

or something else.

If a student gets stuck, it's up to the class to "go Price is Right"
on them and give suggestions.

It worked great in one class, forced in another, and somewhere in the
middle in the third. Overall, I was happy with the results.


We tried it again today as we implemented a queue.

This time, we prepped a little better and the results were better.

The idea needs some fine tuning, but I think it's a fun and different
way to engage the class and I think we'll be playing with twitch
coding some more in the coming months.


